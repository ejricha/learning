Quiz:
1. The brackets [] (with optional state variables between them) signify the start of a lambda expression.
2. Passing state variables in a capture list to a lambda:
[num] = a copy of num (modifiable only if "mutable")
[&num] = a reference to num (always modifyable)
[=] : a copy of all the variables in scope
[&] : not sure?
3. To supply the return type of a lambda, use the -> RetType after the parameter list:
[](const auto& e) -> double { }

Exercises:
1. Lambda binary predicate that helps sort elements in a container in descending order:
sort(v.begin(), v.end(), [](const auto& e1, const auto& e2) { return (e1 > e2); } );
$ ./ex01.bin 
v: 1 5 2 5 6 4 2 8 2 1 0 4 0 9 9 3 5
Sorting v normally
v: 0 0 1 1 2 2 2 3 4 4 5 5 5 6 8 9 9
Sorting v in descending order
v: 9 9 8 6 5 5 5 4 4 3 2 2 2 1 1 0 0
2. Add a number to every element in a vector:
for_each(v.begin(), v.end(), [add](auto& n) { n += add; } );
$ ./ex02.bin 
v: 1 5 2 5 6 4 2 8 2 1 0 4 0 9 9 3 5
Enter value to add to the vector: 30
Adding 30 to every element in the vector
v: 31 35 32 35 36 34 32 38 32 31 30 34 30 39 39 33 35
Enter value to add to the vector: -20
Adding -20 to every element in the vector
v: 11 15 12 15 16 14 12 18 12 11 10 14 10 19 19 13 15
