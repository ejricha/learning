Quiz:
1. An inclusion guard prevents a header file (or any file) from being included multiple times, or recursively:
  #ifndef  _CLASS_FILE_NAME_H_
  #include _CLASS_FILE_NAME_H_
  // All the code in the header file
  #endif // _CLASS_FILE_NAME_H_
2. For the following macro:
  #define SPLIT(x) x / 5
  SPLIT(20) gives 20 / 5 = 4, which is correct.
3. SPLIT(10 + 10) gives 10 + 10 / 4 = 10 + 2.5 = 12.5 = 12, which is incorrect.
4. The macro should have been:
  #define SPLIT(x) ((x) / 5)

Exercises:
1. A macro that multiplies two numbers:
  #define MULTIPLY(x, y) ((x) * (y))
2. A templated version of the same:
  template <typename T1, typename T2>
  T1 multiply(const T1& t1, const T2& t2) {
    return t1 * t2; // Assumes the return type is the first type
  }
3. A template function swap that exchanges two variables (of the same type);
  template <typename T>
  void swap(const T& t1, const T& t2) {
    T t3 = t1;
    t1 = t2;
    t2 = t3;
  }
4. Always use excessive parentheses, and use a double just in case:
  #define QUARTER(x) ((x) / 4.0)
5. See ex.cpp
ex05.
arrayIntString:
 a1 has 40 elements (160 bytes total) :  1 1 1 1 1 1 1 1 1 1
 a2 has 320 elements (10240 bytes total) :  nothing nothing nothing nothing nothing nothing nothing nothing nothing nothing
arrayIntString set to 7 and "potato":
 a1 has 40 elements (160 bytes total) :  7 7 7 7 7 7 7 7 7 7
 a2 has 320 elements (10240 bytes total) :  potato potato potato potato potato potato potato potato potato potato
arrayCharDouble:
 a1 has 10 elements (10 bytes total) :  p p p p p p p p p p
 a2 has 80 elements (640 bytes total) :  -12.21 -12.21 -12.21 -12.21 -12.21 -12.21 -12.21 -12.21 -12.21 -12.21
arrayCharDouble set to 'x' and 3.2123:
 a1 has 10 elements (10 bytes total) :  x x x x x x x x x x
 a2 has 80 elements (640 bytes total) :  3.2123 3.2123 3.2123 3.2123 3.2123 3.2123 3.2123 3.2123 3.2123 3.2123
6. See ex.cpp
// Handle no args
void Display() {}
// Variadic Template
template <typename T, typename... Others>
void Display(const T& t, Others... o) {
  const size_t n = sizeof...(o);
  cout << " " << n << " : " << t << "\n";
  Display(o ...);
} 
ex06.
Display()
Display(999)
 0 : 999
Display(1, 2)
 1 : 1
 0 : 2
Display(1, 2, 3)
 2 : 1
 1 : 2
 0 : 3
Display(4, 5.1, "six", '7', 8, 90/10)
 5 : 4
 4 : 5.1
 3 : six
 2 : 7
 1 : 8
 0 : 9
